/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dashboards;

import databaseConnectivity.MyPrisonConnection;
import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

/**
 *
 * @author 702
 */
public class head_notification_loadpanel extends javax.swing.JPanel {

    /**
     * Creates new form head_notification_loadpanel
     */
    
    String description,title,current_head_id,start_time,end_time;
    Connection con;
    private submit_feedback feedback;
    private head_dash head;
    JPanel load;
    private schedule sch;
    private schedule_select_requirement sch_req;
    public head_notification_loadpanel(String desc,JPanel ld,String tit,String hd_id) {
        initComponents();
        MyPrisonConnection o = new MyPrisonConnection();
                con = o.getMyConnection();
        description = desc;
        load = ld;
        title = tit;
        current_head_id = hd_id;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fetch_title_label = new javax.swing.JLabel();
        fetch_description_label = new javax.swing.JLabel();
        fetch_receive_label = new javax.swing.JLabel();
        view_btn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(880, 31));
        setMinimumSize(new java.awt.Dimension(880, 31));
        setPreferredSize(new java.awt.Dimension(801, 31));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fetch_title_label.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        fetch_title_label.setText("Title");
        add(fetch_title_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 6, -1, -1));

        fetch_description_label.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        fetch_description_label.setText("Description");
        add(fetch_description_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 6, -1, -1));

        fetch_receive_label.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        fetch_receive_label.setText("Receive");
        add(fetch_receive_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 6, -1, -1));

        view_btn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        view_btn.setText("View");
        view_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_btnActionPerformed(evt);
            }
        });
        add(view_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 5, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void view_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_btnActionPerformed
        // TODO add your handling code here:
        
        String f_nm,m_nm,l_nm,full_nm,type;
      if(title.equals("Submit Feedback")){
        feedback = new submit_feedback(description);
        load.removeAll();
        load.add(feedback, BorderLayout.CENTER);
        load.revalidate();
        load.repaint();
       
        PreparedStatement pst,pstm;
        ResultSet res,resu;
        String qu = "SELECT p_firstname,p_midname,p_lastname,c_type FROM convicted_prisoner WHERE c_id=?"; 
        
        try {
            pst = con.prepareStatement(qu);
            pst.setString(1, description);
            res = pst.executeQuery();
            
            while(res.next()){
                f_nm = res.getString("p_firstname");
                m_nm = res.getString("p_midname");
                l_nm = res.getString("p_lastname");
                full_nm = (f_nm+" "+" "+m_nm+" "+l_nm);
                type = res.getString("c_type");
                
                feedback.fetch_id.setText(description);
                feedback.fetch_name.setText(full_nm);
                feedback.fetch_type.setText(type);
            }
        
        } catch (SQLException ex) {
            Logger.getLogger(head_notification_loadpanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
      }
      else
      {
          sch = new schedule(current_head_id,description,start_time,end_time);
          load.removeAll();
          load.add(sch, BorderLayout.CENTER);
          load.revalidate();
          load.repaint();
          
          PreparedStatement pstt,pstt1;
          ResultSet re,re1;
          String qui = "SELECT p_firstname,p_midname,p_lastname,c_type FROM convicted_prisoner WHERE c_id=?";
          try {
              pstt = con.prepareStatement(qui);
              pstt.setString(1, description);
              re = pstt.executeQuery();
              
              while(re.next()){
                f_nm = re.getString("p_firstname");
                m_nm = re.getString("p_midname");
                l_nm = re.getString("p_lastname");
                full_nm = (f_nm+" "+" "+m_nm+" "+l_nm);
                type = re.getString("c_type");
                
                
                sch.fetch_id.setText(description);
                sch.fetch_name.setText(full_nm);
                sch.fetch_type.setText(type);
            }
              
          } catch (SQLException ex) {
              Logger.getLogger(head_notification_loadpanel.class.getName()).log(Level.SEVERE, null, ex);
          }
          
          String qa = "SELECT req_name,DATE_FORMAT(reqend(req_id),'%d/%m/%y') AS end_date,TIME_FORMAT(rstart_time,'%H:%i') AS rstart_time,TIME_FORMAT(rduration(req_id),'%H:%i') AS rend_time FROM requirements WHERE unit_code=(SELECT unit_code FROM head WHERE head_id=? AND reqend(req_id) >= CURRENT_DATE()) AND rstart_date <= CURRENT_DATE()"
                  + "";
          String requirement_nm,end_date;
          try {
                pstt1 = con.prepareStatement(qa);
                pstt1.setString(1, current_head_id);
                re1 = pstt1.executeQuery();
                
                sch.active_requirement_panel.removeAll();
                while(re1.next())
                {
                    sch_req = new schedule_select_requirement(sch);
                    requirement_nm = re1.getString("req_name");
                    end_date = re1.getString("end_date");
                    start_time = re1.getString("rstart_time");
                    end_time = re1.getString("rend_time");
                    sch_req.requirement_label_name.setText(requirement_nm);
                    sch_req.end_date.setText(end_date);
                    
                    
                    //sch_req.setNotSelectedFlag();
                    sch_req.setTimes(start_time, end_time);
                    sch.active_requirement_panel.add(sch_req);
                    sch.active_requirement_panel.revalidate();
                    sch.active_requirement_panel.repaint();
                    
                    
                }
            } catch (SQLException ex) {
                Logger.getLogger(head_notification_loadpanel.class.getName()).log(Level.SEVERE, null, ex);
            }
          
      }
      
        
    }//GEN-LAST:event_view_btnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel fetch_description_label;
    public javax.swing.JLabel fetch_receive_label;
    public javax.swing.JLabel fetch_title_label;
    public javax.swing.JButton view_btn;
    // End of variables declaration//GEN-END:variables
}
